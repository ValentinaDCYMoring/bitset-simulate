#pragma once
#include <iostream>
#include <vector>
using namespace std;

class BitMap
{
public:
	BitMap(size_t range)
	{
		_bitMap.resize(range / 8 + 1,0);
	}

	void  Set(size_t value)
	{
		size_t index = value / 8;//或者>>3  (2*2*2=8)
		size_t pos = value % 8;

		_bitMap[index] |= (1 << pos);
	}
	void  Reset(size_t value)
	{
		size_t index = value / 8;//或者>>3  (2*2*2=8)
		size_t pos = value % 8;

		_bitMap[index] &= ~(1 << pos);
	}

	bool Test(size_t value)
	{
		size_t index = value / 8;
		size_t pos = value % 8;
		if (_bitMap[index] & (1 << pos))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

protected:
	vector<char> _bitMap;
};

//42亿个数
void TestBitMap()
{
	//BitMap bm(1024 * 1024 * 1024 * 4);
	BitMap bm(-1);//创建多大的空间
	bm.Set(1101);
	bm.Set(1101);
	bm.Set(110001);
	bm.Set(1133301);

	cout << bm.Test(1101) << endl;
	cout << bm.Test(110100) << endl;
	cout << bm.Test(110001) << endl;

}
